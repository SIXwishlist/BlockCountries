#!/bin/bash

V=

while getopts ":v" opt; do
    case $opt in
        v) V=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            echo "Usage: `basename $0` [-v]"
            exit 1
            ;;
    esac
done

if ! which perl > /dev/null 2>&1 ; then
    echo "You need to install Perl, from your distribution, or see https://www.perl.org"
    exit 1
fi

ppath="`which perl`"
ppath="`dirname $ppath`"
echo "Perl version `perl -e'printf \"%vd\", \$^V'` was found in $ppath"

if [ -z "NOTNEEDED" ] ; then
    if ! which tee > /dev/null 2>&1 ; then
        echo "You need to install tee (core OS command, part of the GNU coreutils package)"
        exit 1
    fi

    tpath="`which tee`"
    tpath="`dirname $tpath`"
    echo "`tee --version | head -n 1` was found in $tpath"
fi

function needs {
    m="$1"
    v="$2"
    if perl -M"$m $v" -e'exit;' >/dev/null 2>&1 ; then
        if [ -n "$v" ] && [ -n "$V" ]; then
            perl -M"$m" -e"print \"  $m version \$$m::VERSION found\n\";exit;"
        fi
    else
        if [ -z "$v" ]; then
            echo "Perl version $m is required"
            OK=
            NEWPERL="$m"
            return 1
        fi
        if perl -M"$m" -e'exit;' >/dev/null 2>&1 ; then
            perl -M$m -e"print \"Perl module $m must be upgraded from version \$$m::VERSION to at least version $v\n\";exit;"
            OK=
            CPAN="$CPAN $m"
            return 1
        fi
        echo "Perl module $m (minimum version $v) must be installed"
        OK=
        CPAN="$CPAN $m"
        return 1
    fi
    return 0
}

OK=1
CPAN=
NEWPERL=

echo ""

needs                         5.008008 # Perl version
needs Errno                   1.0901
needs File::Basename          2.74
needs Carp                    1.3301
needs Cwd                     3.33
needs File::Path              2.08
needs File::Temp              0.2304
needs Fcntl                   1.05
needs IO::Compress::Zip       2.069
needs IO::Uncompress::Gunzip  2.064
needs Locale::Country         3.37
needs LWP::Simple             6.00
needs Net::IP                1.25
needs NetAddr::IP            4.044
needs Net::Domain            2.23
needs Parse::Syslog          1.10
needs POSIX                  1.09
needs Regexp::IPv6           0.03
needs Socket                 2.006
needs Storable               2.30
needs Symbol                 1.06
needs Sys::Syslog            0.29
needs Text::ParseWords       3.27

if [ -n "$V" ]; then
    echo
fi

if [ -n "$OK" ]; then
    echo "All needed perl modules are installed and meet minimum version requirements"
else
    echo ""
    if [ -n "$NEWPERL" ]; then
        echo "Perl $NEWPERL must be installed from your distribution, or https://www.perl.org"
        echo "After upgrading Perl, re-run bcinstall"
        exit 1
    fi
    echo "If Perl was installed as a package, you should get these modules from your package distribution if possible."
    echo "For Linux distributions, you would use apt-get, yum install or equivalent"
    echo "If Perl was installed from source, or your package distribution doesn't have these modules, get them from CPAN."
        if [ -n"$CPAN" ]; then
        if which cpan > /dev/null 2>&1 ; then
            echo "If you need to get them from CPAN, the cpan install command is:"
            echo "    cpan install$CPAN"
            echo "You can also visit https://search.cpan.org to download them manually."
        else
            echo "The cpan command is not installed.  Visit https://search.cpan.org to download them manually."
        fi
    fi
    exit 1;
fi

if [ "`readlink -f $ppath/perl`" != "`readlink -f /usr/bin/perl`" ]; then
    echo ""
    echo "You must create a symbolic link from /usr/bin/perl to `readlink -f $ppath/perl`"
fi

echo ""

OK=1
patha=
pgma=
for ipt in iptables ip6tables iptables-restore ip6tables-restore iptables-save ip6tables-save; do

    if ! which $ipt >/dev/null 2>&1 ; then
        echo "$ipt not found in $PATH"
        OK=
    else
        path="`which $ipt`"
        path="`dirname $path`"
        if [[ "$ipt" =~ - ]]; then # tables-(something) don't have --version
            echo "$ipt found in $path"
        else
            echo "`$ipt --version` found in $path"
        fi
        if [ -z "$patha" ]; then
            patha="$path"
            pgma="$ipt"
        else
            if [ "$path" != "$patha" ]; then
                echo "$ipt must be in the same directory ($patha) as $pgma"
                OK=
            fi
        fi
    fi

done

if [ -z "$OK" ]; then
    echo "iptables must be installed"
    exit 1;
fi

if [ "$path" != '/sbin' ]; then
    echo ""
    echo "Be sure to include \"-path $path\" in your configuration file"
fi

echo ""
echo "All checks completed successfully"

exit 0
