#!/bin/bash

# Copyright (C) 2016 Timothe Litt litt _at_ acm _ddot_ org

# Minimum version of iptables
#
IPTV=1.4.10

export V=
IP6=1
IP4=1
while getopts ":hHFSv" opt; do
    case $opt in
        v)
            V=1
            ;;
        F)
            IP4=
            ;;
        S)
            IP6=
            ;;
        h|H)
            cat >&2 <<EOF
Check for software required to run BlockCountries

Usage
    `basename $0` [-h] [-v] [-F] [-S]

Options
    -h This help
    -F Do NOT check for IPv4 software
    -S Do NOT check for IPv6 software
    -v List installed Perl modules that meet minimun version requirements

Output
    Reports the installed version of Perl

    Reports Perl modules required by BlockCountries that are not installed
    or below minimum required version

    Reports iptables/ip6tables version, path consistency and configuration
    -path value

    Reports if a symlink is required for BlockCountries to find the Perl
    interpreter

    Reports cpan command used to update/install modules.  However,
    obtaining modules from your Perl packager/distribution is prefered.

    Reports BlockCountries configuration file search list, and if a
    file exists in each one.

NOTE:
    Some failures abort checking.  Re-run until no issues are reported.

exit status
    0 if all checks pass
    1 if some check(s) fail

EOF
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            echo "Usage: `basename $0` -h for usage" 
            exit 1
            ;;
    esac
done

if ! which perl > /dev/null 2>&1 ; then
    echo "You need to install Perl, from your distribution, or see https://www.perl.org"
    exit 1
fi

ppath="`which perl`"
ppath="`dirname $ppath`"
echo "Perl version `perl -e'printf \"%vd\", \$^V'` was found in $ppath"

if [ -z "NOTNEEDED" ] ; then
    if ! which tee > /dev/null 2>&1 ; then
        echo "You need to install tee (core OS command, part of the GNU coreutils package)"
        exit 1
    fi

    tpath="`which tee`"
    tpath="`dirname $tpath`"
    echo "`tee --version | head -n 1` was found in $tpath"
fi

function needs {
    m="$1"
    v="$2"
    if perl -M"$m $v" -e'exit;' >/dev/null 2>&1 ; then
        if [ -n "$v" ] && [ -n "$V" ]; then
            perl -M"$m" -e"print \"  $m version \$$m::VERSION found\n\";exit;"
        fi
    else
        if [ -z "$v" ]; then
            echo "Perl version $m is required"
            OK=
            NEWPERL="$m"
            return 1
        fi
        if perl -M"$m" -e'exit;' >/dev/null 2>&1 ; then
            perl -M$m -e"print \"Perl module $m must be upgraded from version \$$m::VERSION to at least version $v\n\";exit;"
            OK=
            CPAN="$CPAN $m"
            return 1
        fi
        echo "Perl module $m (minimum version $v) must be installed"
        OK=
        CPAN="$CPAN $m"
        return 1
    fi
    return 0
}

OK=1
CPAN=
NEWPERL=

echo ""

# Update with BlockCountries needs -modules

needs                         5.8.8 # Perl version
needs Carp                    1.3301
needs Cwd                     3.33
needs Errno                   1.0901
needs Fcntl                   1.05
needs File::Basename          2.74
needs File::Path              2.08
needs File::Temp              0.2304
needs IO::Compress::Zip       2.069
needs IO::Uncompress::Gunzip  2.064
needs LWP::Simple             6.00
needs Locale::Country         3.37
needs Net::Domain            2.23
needs Net::IP                1.25
needs NetAddr::IP            4.044
needs POSIX                  1.09
needs Parse::Syslog          1.10
needs Regexp::IPv6           0.03
needs Socket                 2.006
needs Storable               2.30
needs Symbol                 1.06
needs Sys::Syslog            0.29
needs Text::ParseWords       3.27

if [ -n "$V" ]; then
    echo
fi

if [ -n "$OK" ]; then
    echo "All needed perl modules are installed and meet minimum version requirements"
else
    echo ""
    if [ -n "$NEWPERL" ]; then
        echo "Perl $NEWPERL must be installed from your distribution, or https://www.perl.org"
        echo "After upgrading Perl, re-run bcinstall"
        exit 1
    fi
    echo "If Perl was installed as a package, you should get these modules from your package distribution if possible."
    echo "For Linux distributions, you would use apt-get, yum install or equivalent"
    echo "If Perl was installed from source, or your package distribution doesn't have these modules, get them from CPAN."
        if [ -n"$CPAN" ]; then
        if which cpan > /dev/null 2>&1 ; then
            echo "If you need to get them from CPAN, the cpan install command is:"
            echo "    cpan install$CPAN"
            echo "You can also visit https://search.cpan.org to download them manually."
        else
            echo "The cpan command is not installed.  Visit https://search.cpan.org to download them manually."
        fi
    fi
    exit 1;
fi

if [ "`readlink -f $ppath/perl`" != "`readlink -f /usr/bin/perl`" ]; then
    echo ""
    echo "You must create a symbolic link from /usr/bin/perl to `readlink -f $ppath/perl`"
fi

echo ""

function checkver {
    local PGM="$1"
    local VER="$2"
    local REQ="$3"
    local DIR="$4"

    [ "$VF"="Unknown" ] && VF="$VER"
    if [ "$VER" != "$VF" ]; then
        echo "$PGM version $VER doesn't match $VF"
        OK=
        return 1;
    fi
    perl - <<EOF $PGM $VER $REQ $DIR && return 0
use warnings;
use strict;

    my @ver = split( /\./, \$ARGV[1] );
    \$ver[0] =~ s/^v//;
    my @req = split( /\./, \$ARGV[2]) ;

    my \$c = 0;
    while( @ver && @req ) {
      my \$v = shift @ver;
      my \$r = shift @req;
      \$c = \$v <=> \$r;
      next unless( \$c );
      last;
    }
    if( \$c > 0 || \$c == 0 && @ver >= @req ) {
      print "\$ARGV[0] version \$ARGV[1] found in \$ARGV[3]\n"if( \$ENV{V} );
      exit 0;
    }
    print "\$ARGV[0] version \$ARGV[1] found in \$ARGV[3], at least version \$ARGV[2] is required\n";
    exit 1;
EOF
    OK=
    return 1;        
}

OK=1
patha=
pgma=
VF=Unknown
ip4tables="iptables  iptables-restore  iptables-save"
ip6tables="ip6tables ip6tables-restore ip6tables-save"
if [ -z "$IP6" ]; then
    ip6tables=
fi

for ipt in $ip4tables $ip6tables; do

    if ! which $ipt >/dev/null 2>&1 ; then
        echo "$ipt not found in $PATH"
        OK=
    else
        path="`which $ipt`"
        path="`dirname $path`"
        if [[ "$ipt" =~ - ]]; then # tables-(something) don't have --version
            [ -n "$V" ] && echo "$ipt found in $path"
        else
            checkver `$ipt --version` $IPTV $path
        fi
        if [ -z "$patha" ]; then
            patha="$path"
            pgma="$ipt"
        else
            if [ "$path" != "$patha" ]; then
                echo "$ipt must be in the same directory ($patha) as $pgma"
                OK=
            fi
        fi
    fi

done

echo ""
if [ -z "$OK" ]; then
    echo "iptables must be installed or upgraded"
    exit 1;
fi

echo "iptables version $VF installation looks OK"

if [ "$path" != '/sbin' ]; then
    echo ""
    echo "Be sure to include \"-path $path\" in your configuration file"
fi

# Extract config search list from BlockCountries & report

BC="`dirname $0`/BlockCountries"
if [ -f "$BC" ]; then
    echo ""
    echo "Inspecting configuration of $BC"
    perl <<EOF
use warnings;
use strict;

use File::Basename;

`sed -n -e'/my @CFGFILE =/,/};/p' $BC`

my @dirs;

my \$maxd = 0;
\$maxd = ((length dirname \$_) > \$maxd? length dirname \$_ : \$maxd) foreach( 'Directory/x', 'xENVxBlockCountriesCFGx/x', @CFGFILE );
my \$maxf = 0;
\$maxf = ((length basename \$_) > \$maxf? length basename \$_ : \$maxf) foreach( 'x/File', @CFGFILE );
\$maxf = length( \$ENV{BlockCountriesCFG} ) if( defined \$ENV{BlockCountriesCFG} && length( \$ENV{BlockCountriesCFG} ) > \$maxf );
print ("\nConfiguration file search list:\n");

printf( "  %-*s %-*s Status\n", \$maxd, "Directory", \$maxf, "File" ); 
printf( "  %-*s %-*s %s\n", \$maxd, '\$ENV{BlockCountriesCFG}', \$maxf, (\$ENV{BlockCountriesCFG} || ''),
         (\$ENV{BlockCountriesCFG} && -f \$ENV{BlockCountriesCFG})? '[Exists]':
                (\$ENV{BlockCountriesCFG} && -d dirname( \$ENV{BlockCountriesCFG} )? '[Directory exists]':'[Not present]' ) );

foreach my \$file (@CFGFILE) {
    my \$dir = dirname \$file;
    my \$rt = '';
    printf("  %-*s ", \$maxd, \$dir );
    if( \$dir =~ /^[.]/ ) {
        printf( "%-*s [Not checked, runtime value unknown]\n", \$maxf, '' );
        next;
    }
    if( \$dir =~ /^[~]/ ) {
        \$dir = \$ENV{HOME} || (getpwuid(\$<))[7];
        \$file = "\$dir/" . basename \$file;
        \$rt = ", assuming runtime \$dir"

    }
    if( -f \$file && ! -x \$file ) {
        printf( "%-*s [Exists\$rt]\n", \$maxf, basename( \$file ) );
    } elsif( -d \$dir ) {
        printf( "%-*s [Directory exists\$rt]\n", \$maxf, '' );
    } else {
        printf( "%-*s [Not present\$rt]\n", \$maxf, '' );
    }
}
print( "\nThe first file found will be used at runtime.\nUse BlockCountries config to determine which file is selected.\n" );
exit;
EOF
else
    echo "BlockCountries not found in `dirname $0`"
fi

echo ""
echo "All checks completed successfully"

exit 0
